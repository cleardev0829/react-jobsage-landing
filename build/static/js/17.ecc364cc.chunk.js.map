{"version":3,"sources":["../node_modules/@material-ui/core/useAutocomplete/useAutocomplete.js","../node_modules/@material-ui/core/Autocomplete/autocompleteClasses.js","../node_modules/@material-ui/core/Autocomplete/Autocomplete.js"],"names":["stripDiacritics","string","normalize","replace","findIndex","array","comp","i","length","defaultFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","createFilterOptions","useAutocomplete","props","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionLabelProp","_option$label","label","isOptionEqualToValue","value","groupBy","handleHomeEndKeys","idProp","id","includeInputInList","inputValueProp","onChange","onClose","onHighlightChange","onInputChange","onOpen","openProp","open","openOnFocus","selectOnFocus","valueProp","useId","optionLabel","String","ignoreFocus","React","firstFocus","inputRef","listboxRef","anchorEl","setAnchorEl","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","useControlled","controlled","default","name","setValueState","state","setInputValueState","focused","setFocused","resetInputValue","useEventCallback","event","newValue","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","listboxAvailable","focusTag","tagToFocus","current","focus","querySelector","setHighlightedIndex","index","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","parentElement","add","scrollHeight","clientHeight","element","scrollBottom","scrollTop","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","disabled","getAttribute","hasAttribute","validOptionIndex","maxIndex","newIndex","Math","abs","getNextIndex","setSelectionRange","syncHighlightedIndex","valueItem","currentOption","val","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","push","splice","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","contains","document","activeElement","handleInputChange","target","handleOptionMouseOver","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","Map","reduce","acc","group","getRootProps","_extends","role","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","getClearProps","tabIndex","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseOver","onTouchStart","getAutocompleteUtilityClass","slot","generateUtilityClass","autocompleteClasses","generateUtilityClasses","AutocompleteRoot","experimentalStyled","overridesResolver","styles","styleProps","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","tag","capitalize","inputRoot","root","clearIndicator","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","endAdornment","right","paddingTop","paddingLeft","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","position","top","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","popupIndicator","popupIndicatorOpen","transform","AutocompletePopper","Popper","popper","disablePortal","popperDisablePortal","theme","zIndex","modal","AutocompletePaper","Paper","paper","typography","body1","overflow","AutocompleteLoading","loading","color","palette","text","secondary","AutocompleteNoOptions","noOptions","AutocompleteListbox","listbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","alpha","primary","main","selectedOpacity","hoverOpacity","focusOpacity","AutocompleteGroupLabel","ListSubheader","groupLabel","background","AutocompleteGroupUl","groupUl","_ref","_jsx","ClearIcon","fontSize","_ref2","ArrowDropDownIcon","Autocomplete","inProps","startAdornment","useThemeProps","ChipProps","className","clearIcon","clearText","closeText","forcePopupIcon","getLimitTagsText","more","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openText","PaperComponent","PopperComponent","popupIcon","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","getCustomizedTagProps","params","clsx","map","Chip","children","_jsxs","component","props2","renderListOption","optionProps","undefined","InputLabelProps","InputProps","title","inputProps","as","style","clientWidth","option2","index2"],"mappings":"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","file":"static/js/17.ecc364cc.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { setRef, useEventCallback, useControlled, unstable_useId as useId } from '../utils'; // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\n\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\n\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n\n    const filteredOptions = options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n} // To replace with .findIndex() once we stop IE11 support.\n\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nconst defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when pageup and pagedown keys are used.\n\nconst pageSize = 5;\nexport default function useAutocomplete(props) {\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    isOptionEqualToValue = (option, value) => option === value,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`Material-UI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n\n      return String(optionLabel);\n    }\n\n    return optionLabel;\n  };\n\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = useEventCallback((event, newValue) => {\n    let newInputValue;\n\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n\n    if (inputValue === newInputValue) {\n      return;\n    }\n\n    setInputValueState(newInputValue);\n\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  });\n  React.useEffect(() => {\n    resetInputValue(null, value);\n  }, [value, resetInputValue]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n\n    return true;\n  }), // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const listboxAvailable = open && filteredOptions.length > 0;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n\n      if (missingValue.length > 0) {\n        console.warn([`Material-UI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  }); // Ensure the focusedTag is never inconsistent\n\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index; // does the index exist?\n\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n\n    if (!listboxRef.current) {\n      return;\n    }\n\n    const prev = listboxRef.current.querySelector('[role=\"option\"].Mui-focused');\n\n    if (prev) {\n      prev.classList.remove('Mui-focused');\n      prev.classList.remove('Mui-focusVisible');\n    }\n\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]'); // \"No results\"\n\n    if (!listboxNode) {\n      return;\n    }\n\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n    if (!option) {\n      return;\n    }\n\n    option.classList.add('Mui-focused');\n\n    if (reason === 'keyboard') {\n      option.classList.add('Mui-focusVisible');\n    } // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/TR/wai-aria-practices/examples/listbox/js/listbox.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n\n      if (diff === 'start') {\n        return 0;\n      }\n\n      if (diff === 'end') {\n        return maxIndex;\n      }\n\n      const newIndex = highlightedIndexRef.current + diff;\n\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n\n        return maxIndex;\n      }\n\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n\n        return 0;\n      }\n\n      return newIndex;\n    };\n\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    }); // Sync the content of the input with the highlighted option.\n\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    const valueItem = multiple ? value[0] : value; // The popup is empty, reset\n\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n\n    if (!listboxRef.current) {\n      return;\n    } // Synchronize the value with the highlighted index\n\n\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible\n\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n\n      return;\n    } // Prevent the highlighted index to leak outside the boundaries.\n\n\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    } // Restore the focus to the previous index.\n\n\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [// Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length, // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n\n    if (!node) {\n      return;\n    }\n\n    syncHighlightedIndex();\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        console.error([`Material-UI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n      }\n    }, [componentName]);\n  }\n\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n\n    setOpenState(true);\n    setInputPristine(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n\n  const handleValue = (event, newValue, reason, details) => {\n    if (value === newValue) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n\n    setValueState(newValue);\n  };\n\n  const isTouch = React.useRef(false);\n\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n\n        if (matches.length > 1) {\n          console.error([`Material-UI: The \\`isOptionEqualToValue\\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n\n    if (!disableCloseOnSelect && !event.ctrlKey && !event.metaKey) {\n      handleClose(event, reason);\n    }\n\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n\n    handleClose(event, 'toggleInput');\n    let nextTag = focusedTag;\n\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    } // Wait until IME is settled.\n\n\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.\n\n            event.preventDefault();\n\n            if (disabled) {\n              return;\n            }\n\n            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.\n\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n\n          break;\n\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClear(event);\n          }\n\n          break;\n\n        case 'Backspace':\n          if (multiple && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {\n      inputRef.current.focus();\n      return;\n    }\n\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n\n    handleClose(event, 'blur');\n  };\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n\n  const handleOptionTouchStart = () => {\n    isTouch.current = true;\n  };\n\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  }; // Prevent input blur when interacting with the combobox\n\n\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  }; // Focus the input when interacting with the combobox\n\n\n  const handleClick = () => {\n    inputRef.current.focus();\n\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n\n    firstFocus.current = false;\n  };\n\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`Material-UI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n\n          indexBy.set(group, true);\n        }\n\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      role: 'combobox',\n      'aria-expanded': listboxAvailable\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : null,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false'\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = styleProps;\n  const slots = {\n    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\n\nconst AutocompleteRoot = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = styleProps;\n    return _extends({\n      [`& .${autocompleteClasses.tag}`]: _extends({}, styles.tag, styles[`tagSize${capitalize(size)}`]),\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot,\n      [`& .${autocompleteClasses.input}`]: _extends({}, styles.input, inputFocused && styles.inputFocused)\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon);\n  }\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the root element. */\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, styleProps.fullWidth && {\n  width: '100%'\n}, {\n  /* Styles applied to the tag elements, e.g. the chips. */\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, styleProps.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n\n  /* Styles applied to the Input element. */\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  '& .MuiInput-root': {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  '& .MuiInput-root.MuiInputBase-sizeSmall': {\n    '& .MuiInput-input': {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  '& .MuiOutlinedInput-root': {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 6px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  '& .MuiOutlinedInput-root.MuiInputBase-sizeSmall': {\n    padding: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 6px'\n    }\n  },\n  '& .MuiFilledInput-root': {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    '& .MuiFilledInput-input': {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  '& .MuiFilledInput-root.MuiInputBase-sizeSmall': {\n    paddingBottom: 1,\n    '& .MuiFilledInput-input': {\n      padding: '2.5px 4px'\n    }\n  },\n\n  /* Styles applied to the input element. */\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, styleProps.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  /* Styles applied to the endAdornment element. */\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n\n});\nconst AutocompleteClearIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  /* Styles applied to the clear indicator. */\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = experimentalStyled(IconButton, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    styleProps\n  }, styles) => _extends({}, styles.popupIndicator, styleProps.popupOpen && styles.popupIndicatorOpen)\n})(({\n  styleProps\n}) => _extends({\n  /* Styles applied to the popup indicator. */\n  padding: 2,\n  marginRight: -2\n}, styleProps.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = experimentalStyled(Popper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return _extends({\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, styleProps.disablePortal && styles.popperDisablePortal);\n  }\n})(({\n  theme,\n  styleProps\n}) => _extends({\n  /* Styles applied to the popper element. */\n  zIndex: theme.zIndex.modal\n}, styleProps.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = experimentalStyled(Paper, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto',\n  margin: '4px 0'\n}));\nconst AutocompleteLoading = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  /* Styles applied to the loading wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  /* Styles applied to the no option wrapper. */\n  color: theme.palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = experimentalStyled('div', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  /* Styles applied to the listbox component. */\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n\n  /* Styles applied to the option elements. */\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = experimentalStyled(ListSubheader, {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  /* Styles applied to the group's label elements. */\n  backgroundColor: theme.palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = experimentalStyled('ul', {}, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  /* Styles applied to the group's ul elements. */\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\n\nvar _ref = /*#__PURE__*/_jsx(ClearIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/_jsx(ArrowDropDownIcon, {});\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ref,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  const styleProps = _extends({}, props, {\n    disablePortal,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      styleProps: styleProps,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      styleProps: styleProps,\n      children: params.children\n    })]\n  }, params.key);\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      styleProps: styleProps\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            styleProps: styleProps,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              className: classes.clearIndicator,\n              styleProps: styleProps,\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              className: clsx(classes.popupIndicator),\n              styleProps: styleProps,\n              children: popupIcon\n            })) : null]\n          })\n        },\n        inputProps: _extends({\n          className: clsx(classes.input),\n          disabled\n        }, getInputProps())\n      })\n    })), popupOpen && anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      className: clsx(classes.popper),\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      styleProps: styleProps,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: true,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperComponent,\n        className: classes.paper,\n        styleProps: styleProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          styleProps: styleProps,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          styleProps: styleProps,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          styleProps: styleProps\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n\n            return renderListOption(option, index);\n          })\n        })) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['Material-UI: The Autocomplete expects the `value` prop to be an array or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"],"sourceRoot":""}